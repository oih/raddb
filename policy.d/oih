# WORK IN PROGRESS
$INCLUDE "canonicalization"

#
# Set OIH-API-Device-MAC string to Calling-Station-Id in aa:bb:cc:dd:ee:ff format
#
oih_api_mac_radius {
	if (&Calling-Station-Id && (&Calling-Station-Id =~ /^${policy.mac-addr-regexp}$/i)) {
		update control {
			&OIH-API-Device-MAC := "%{tolower:%{1}:%{2}:%{3}:%{4}:%{5}:%{6}}"
		}
		updated
	}
	else {
		noop
	}
}

#
# Set OIH-API-Device-MAC string to DHCP-Client-Hardware-Address in aa:bb:cc:dd:ee:ff format
#
oih_api_mac_dhcp {
    if(&DHCP-Client-Hardware-Address) {
        update control {
            &OIH-API-Device-MAC = "%{tolower:%{DHCP-Client-Hardware-Address}}"
        }
		updated
    }
    else {
        noop
    }
}

# DEPRECATED DONT USE
dhcp_oih_user_handle_request {
    oih_api_mac_dhcp

    update reply {
        &DHCP-Domain-Name-Server = 134.130.4.1
        &DHCP-Domain-Name-Server = 134.130.5.1
        &DHCP-Subnet-Mask = 255.255.254.0
        &DHCP-Router-Address = 137.226.148.1
        &DHCP-IP-Address-Lease-Time = 7200
        &DHCP-DHCP-Server-Identifier = 137.226.148.5 # get this from the ipaddr variable somehow
    }

    sqlippool

	if (ok) {
		update reply {
			&DHCP-Your-IP-Address = "%{reply:Framed-IP-Address}"
		}
	}
}

oih_api_set_attributes {
    update control {
        OIH-API-Device-Id = "%{sql:SELECT id FROM `device` WHERE mac = '%{control:OIH-API-Device-MAC}'}"
    }
    if (&control:OIH-API-Device-Id != 0) {
        # device exists
        update control {
            OIH-API-User-Id = "%{sql:SELECT user FROM `device` WHERE id = %{control:OIH-API-Device-Id}}"
            OIH-API-Device-NAT = "%{sql:SELECT nat FROM `device` WHERE id = %{control:OIH-API-Device-Id}}"
        }
        update control {
            OIH-API-User-Status = "%{sql:SELECT status FROM `user` WHERE id = %{control:OIH-API-User-Id}}"
            OIH-API-User-Block-Message = "%{sql:SELECT block_message FROM `user` WHERE id = %{control:OIH-API-User-Id}}"
        }
        if (&control:OIH-API-Device-NAT == 1) {
            update control {
                OIH-API-IPv4-Id = "%{sql:SELECT id FROM `ipv4` WHERE user = %{control:OIH-API-User-Id} AND nat = 1}"
            }
            if (&control:OIH-API-IPv4-Id != 0) {
                # found NAT pool for this user
                update control {
                    # we don't need the public IP for NAT
                    # OIH-API-IPv4-Addr = <ipaddr>"%{sql:SELECT address FROM `ipv4` WHERE id = %{control:OIH-API-IPv4-Id}}"
                    OIH-API-IPv4-Pool = "%{sql:SELECT natpool FROM `ipv4` WHERE id = %{control:OIH-API-IPv4-Id}}"
                }
            }
            else {
                # user has no NAT IP
                notfound
            }
        }
        else {
            # device has public IP
            update control {
                OIH-API-IPv4-Id = "%{sql:SELECT id FROM `ipv4` WHERE user = %{control:OIH-API-User-Id} AND device = %{control:OIH-API-Device-Id} AND nat = 0}"
            }
            if (&control:OIH-API-IPv4-Id != 0) {
                # found NAT pool for this user
                update control {
                    OIH-API-IPv4-Addr = "%{sql:SELECT address FROM `ipv4` WHERE id = %{control:OIH-API-IPv4-Id}}"
                }
            }
            else {
                # user has no public IP for this device
                notfound
            }
        }
    }
    else {
        # device doesn't exist
        notfound
    }
    # return userlock if user is blocked
    #if (&control:OIH-API-User-Status && (&control:OIH-API-User-Status == 'blocked')) {
    #    userlock
    #}
    #else {
    #    ok
    #}
    # userlock will just return the dhcp module which we don't want
    noop

}

oih_api_set_dhcp {
    # these only get updated if the OIH-API-* attributes exist
    update control {
        &Pool-Name := &control:OIH-API-IPv4-Pool
    }
   
    update reply {
        &DHCP-Your-IP-Address := &control:OIH-API-IPv4-Addr
    }
}

# call this after dhcp_sqlippool
oih_api_set_dhcp_subnet {
    if (<ipaddr>&DHCP-Your-IP-Address < 137.226.148.0/23) {
        update reply {
            &DHCP-Domain-Name-Server = 134.130.4.1
            &DHCP-Domain-Name-Server = 134.130.5.1
            &DHCP-Subnet-Mask = 255.255.254.0
            &DHCP-Router-Address = 137.226.148.1
            &DHCP-IP-Address-Lease-Time = 7200
            &DHCP-DHCP-Server-Identifier = 137.226.148.5 # get this from the socket ipaddr variable somehow
        }
        updated
    }
    elsif (<ipaddr>&DHCP-Your-IP-Address < 10.148.0.0/15) {
        update reply {
            &DHCP-Domain-Name-Server = 134.130.4.1
            &DHCP-Domain-Name-Server = 134.130.5.1
            &DHCP-Subnet-Mask = 255.254.0.0
            &DHCP-Router-Address = 10.148.0.1
            &DHCP-IP-Address-Lease-Time = 7200
            &DHCP-DHCP-Server-Identifier = 10.148.0.5 # get this from the socket ipaddr variable somehow
        }
        updated
    }
    else {
        noop
    }
}

oih_dhcp_pool_unregistered_temporary {
    if(!&control:Pool-Name && !&reply:DHCP-Your-IP-Address && &control:OIH-API-Device-Id == 0) {
        update control {
            &Pool-Name := "oih_user_10_149_99"
            OIH-API-Return = "%{sql:INSERT INTO `device` (mac, nat, user) VALUES ('%{control:OIH-API-Device-MAC}', 1, 69)}"
        }
        updated
    }
    else {
        noop
    }
}
