server dhcp-oih-mgmt {
listen {
	type = dhcp
	ipaddr = 0.0.0.0
	src_ipaddr = 10.0.80.80
	port = 67
	interface = oih-mgmt-0
	broadcast = yes
}

dhcp DHCP-Discover {
	update reply {
	    &DHCP-Message-Type = DHCP-Offer
	}

	update reply {
		&DHCP-Subnet-Mask = 255.255.0.0
		&DHCP-IP-Address-Lease-Time = 480
		&DHCP-DHCP-Server-Identifier = 10.0.80.80
	}

    unifi_vendor

    update control {
        &Pool-Name := "oih_mgmt"
    }
    dhcp_sqlippool

	ok
}

dhcp DHCP-Request {

	# Response packet type. See DHCP-Discover section above.
	update reply {
	       &DHCP-Message-Type = DHCP-Ack
	}

	update reply {
		&DHCP-Subnet-Mask = 255.255.0.0
		&DHCP-IP-Address-Lease-Time = 480
		&DHCP-DHCP-Server-Identifier = 10.0.80.80
	}

    unifi_vendor
#	update control {
#		&Pool-Name := "local"
#	}

    update control {
        &Pool-Name := "oih_mgmt"
    }
	dhcp_sqlippool

	ok
}

dhcp DHCP-Decline {
	update reply {
	       &DHCP-Message-Type = DHCP-Do-Not-Respond
	}
	reject
}

dhcp DHCP-Inform {
	update reply {
	       &DHCP-Message-Type = DHCP-Do-Not-Respond
	}
	reject
}

dhcp DHCP-Release {
	update reply {
	       &DHCP-Message-Type = DHCP-Do-Not-Respond
	}
	reject
}


dhcp DHCP-Lease-Query {
	#  The thing being queried for is implicit
	#  in the packets.

	# has MAC, asking for IP, etc.
	if (&DHCP-Client-Hardware-Address) {
		# look up MAC in database
	}

	# has IP, asking for MAC, etc.
	elsif (&DHCP-Your-IP-Address) {
		# look up IP in database
	}

	# has host name, asking for IP, MAC, etc.
	elsif (&DHCP-Client-Identifier) {
		# look up identifier in database
	}
	else {
		update reply {
			&DHCP-Message-Type = DHCP-Lease-Unknown
		}

		ok

		# stop processing
		return
	}

	#
	#  We presume that the database lookup returns "notfound"
	#  if it can't find anything.
	#
	if (notfound) {
		update reply {
			&DHCP-Message-Type = DHCP-Lease-Unknown
		}
		ok
		return
	}

	update reply {
		&DHCP-Message-Type = DHCP-Lease-Unassigned
	}

}

}

######################################################################
#
#  This next section is a sample configuration for the "passwd"
#  module, that reads flat-text files.  It should go into
#  radiusd.conf, in the "modules" section.
#
#  The file is in the format <mac>,<ip>
#
#	00:01:02:03:04:05,192.0.2.100
#	01:01:02:03:04:05,192.0.2.101
#	02:01:02:03:04:05,192.0.2.102
#
#  This lets you perform simple static IP assignment.
#
#  There is a preconfigured "mac2ip" module setup in
#  mods-available/mac2ip. To use it do:
#
#    # cd raddb/
#    # ln -s ../mods-available/mac2ip mods-enabled/mac2ip
#    # mkdir mods-config/passwd
#
#  Then create the file mods-config/passwd/mac2ip with the above
#  format.
#
######################################################################


#  This is an example only - see mods-available/mac2ip instead; do
#  not uncomment these lines here.
#
#passwd mac2ip {
#	filename = ${confdir}/mac2ip
#	format = "*DHCP-Client-Hardware-Address:=DHCP-Your-IP-Address"
#	delimiter = ","
#}
